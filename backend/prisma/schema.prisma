// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
// Customer
model Customer {
  id                     String                   @id() @default(uuid())
  name                   String
  document               String?
  type                   CustomerType             @default(PERSONAL)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  customerAddress        CustomerAddress[]
  customerRepresentative CustomerRepresentative[]
  documents              Document[]
}

enum CustomerType {
  PERSONAL
  ENTITY
}

model CustomerAddress {
  id           String     @id() @default(uuid())
  street       String
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  postalCode   String?
  customer     Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  document     Document[]
}

model CustomerRepresentative {
  id         String     @id() @default(uuid())
  name       String
  role       String?
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  document   Document[]
}

// -----------------------------------------------------------------------------
// Finance
model Finance {
  id          String      @id() @default(uuid())
  date        DateTime    @db.Date
  value       Int
  type        FinanceType @default(OUTCOME)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum FinanceType {
  INCOME
  OUTCOME
}

// -----------------------------------------------------------------------------
// Document
model Document {
  id                       String                  @id() @default(uuid())
  date                     DateTime                @db.Date
  type                     DocumentType            @default(BUDGET)
  customerRepresentative   CustomerRepresentative? @relation(fields: [customerRepresentativeId], references: [id], onDelete: SetNull)
  customerRepresentativeId String?
  customerAddress          CustomerAddress?        @relation(fields: [customerAddressId], references: [id], onDelete: SetNull)
  customerAddressId        String?
  customer                 Customer?               @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId               String?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  documentBlock            DocumentBlock[]
}

enum DocumentType {
  RECIPT
  BUDGET
}

model DocumentBlock {
  id                     String                  @id() @default(uuid())
  document               Document                @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId             String
  price                  Int?
  description            String?
  documentRefBlockName   DocumentRefBlockName?   @relation(fields: [documentRefBlockNameId], references: [name], onDelete: SetNull)
  documentRefBlockNameId String?
  documentBlockMaterial  DocumentBlockMaterial[]
  documentBlockPlace     DocumentBlockPlace[]
}

model DocumentBlockMaterial {
  id                    String               @id() @default(uuid())
  documentBlock         DocumentBlock        @relation(fields: [documentBlockId], references: [id], onDelete: Cascade)
  documentBlockId       String
  documentRefMaterial   DocumentRefMaterial? @relation(fields: [documentRefMaterialId], references: [name], onDelete: SetNull)
  documentRefMaterialId String?
}

model DocumentBlockPlace {
  id                       String                     @id() @default(uuid())
  documentBlock            DocumentBlock              @relation(fields: [documentBlockId], references: [id], onDelete: Cascade)
  documentBlockId          String
  documentRefPlaceFloor    DocumentRefPlaceFloor?     @relation(fields: [documentRefPlaceFloorId], references: [name], onDelete: SetNull)
  documentRefPlaceFloorId  String?
  documentRefPlaceRoom     DocumentRefPlaceRoom?      @relation(fields: [documentRefPlaceRoomId], references: [name], onDelete: SetNull)
  documentRefPlaceRoomId   String?
  documentBlockPlaceDevice DocumentBlockPlaceDevice[]
}

model DocumentBlockPlaceDevice {
  id                          String                       @id() @default(uuid())
  documentBlockPlace          DocumentBlockPlace           @relation(fields: [documentBlockPlaceId], references: [id], onDelete: Cascade)
  documentBlockPlaceId        String
  quantity                    Int                          @default(1)
  type                        DocumentBlockPlaceDeviceType @default(INSIDE)
  documentRefDeviceBrand      DocumentRefDeviceBrand?      @relation(fields: [documentRefDeviceBrandId], references: [name], onDelete: SetNull)
  documentRefDeviceBrandId    String?
  documentRefDeviceCapacity   DocumentRefDeviceCapacity?   @relation(fields: [documentRefDeviceCapacityId], references: [name], onDelete: SetNull)
  documentRefDeviceCapacityId String?
  documentRefDeviceMode       DocumentRefDeviceMode?       @relation(fields: [documentRefDeviceModeId], references: [name], onDelete: SetNull)
  documentRefDeviceModeId     String?
}

enum DocumentBlockPlaceDeviceType {
  INSIDE
  OUTSIDE
  BOTH
}

// Document Refs
model DocumentRefDeviceBrand {
  name                     String                     @id() @unique()
  documentBlockPlaceDevice DocumentBlockPlaceDevice[]
}

model DocumentRefDeviceCapacity {
  name                     String                     @id() @unique()
  documentBlockPlaceDevice DocumentBlockPlaceDevice[]
}

model DocumentRefDeviceMode {
  name                     String                     @id() @unique()
  documentBlockPlaceDevice DocumentBlockPlaceDevice[]
}

model DocumentRefPlaceRoom {
  name               String               @id() @unique()
  documentBlockPlace DocumentBlockPlace[]
}

model DocumentRefPlaceFloor {
  name               String               @id() @unique()
  documentBlockPlace DocumentBlockPlace[]
}

model DocumentRefMaterial {
  name                  String                  @id() @unique()
  documentBlockMaterial DocumentBlockMaterial[]
}

model DocumentRefBlockName {
  name          String          @id() @unique()
  documentBlock DocumentBlock[]
}
